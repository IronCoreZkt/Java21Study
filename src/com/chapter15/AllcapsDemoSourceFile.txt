PACKAGE COM.CHAPTER15;

IMPORT JAVA.IO.BUFFEREDREADER;
IMPORT JAVA.IO.BUFFEREDWRITER;
IMPORT JAVA.IO.FILEREADER;
IMPORT JAVA.IO.FILEWRITER;
IMPORT JAVA.IO.IOEXCEPTION;
IMPORT JAVA.NIO.FILE.FILESYSTEM;
IMPORT JAVA.NIO.FILE.FILESYSTEMS;
IMPORT JAVA.NIO.FILE.FILES;
IMPORT JAVA.NIO.FILE.PATH;

PUBLIC CLASS ALLCAPSDEMO {
	PUBLIC STATIC VOID MAIN(STRING[] ARGS) {
		IF (ARGS.LENGTH < 1) {
			SYSTEM.OUT.PRINTLN("YOU MUST SPECIFY A FILENAME");
			SYSTEM.EXIT(-1);
		}
		ALLCAPS CAP = NEW ALLCAPS(ARGS[0]);
		CAP.CONVERT();
	}
}

CLASS ALLCAPS {
	STRING SOURCENAME;

	PUBLIC ALLCAPS(STRING SOURCEARG) {
		SOURCENAME = SOURCEARG;
	}

	PUBLIC VOID CONVERT() {
		TRY {
			// CREATE FILE OBJECTS
			FILESYSTEM FS = FILESYSTEMS.GETDEFAULT();
			PATH SOURCE = FS.GETPATH(SOURCENAME);
			PATH TEMP = FS.GETPATH(SOURCENAME+"_TMP");
			// CREATE INPUT STREAM
			FILEREADER FR = NEW FILEREADER(SOURCE.TOFILE());
			BUFFEREDREADER IN = NEW BUFFEREDREADER(FR);
			// CREATE OUTPUT STREAM
			FILEWRITER FW = NEW FILEWRITER(TEMP.TOFILE());
			BUFFEREDWRITER OUT = NEW BUFFEREDWRITER(FW);

			BOOLEAN EOF = FALSE;
			INT INCHAR;
			SYSTEM.OUT.PRINTLN("INFO -- 开始转换！");
			DO {
				INCHAR = IN.READ();
				IF (INCHAR != -1) {
					SYSTEM.OUT.PRINT((CHAR)INCHAR);
					CHAR OUTCHAR = CHARACTER.TOUPPERCASE((CHAR) INCHAR);
					OUT.WRITE(OUTCHAR);
				} ELSE
					EOF = TRUE;
			} WHILE (!EOF);
			IN.CLOSE();
			OUT.CLOSE();
			FILES.DELETE(SOURCE);
			FILES.MOVE(TEMP, SOURCE);
			SYSTEM.OUT.PRINTLN("INFO -- 转换完成！");
		} CATCH (IOEXCEPTION | SECURITYEXCEPTION E) {
			//E.PRINTSTACKTRACE();
			SYSTEM.OUT.PRINTLN("ERROR -- "+E.GETMESSAGE());
		}

	}
}
